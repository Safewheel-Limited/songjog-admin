type User {
  id: Float!
  uid: String!
  fullName: String!
  phone: String!
  email: String
  password: String!
  gender: String!
  type: String!
  baseRole: String
  isDisabled: Boolean
  deletedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
scalar DateTime

type SignResponse {
  accessToken: String
  refreshToken: String
  user: User
}

type Pagination {
  page: Int!
  limit: Int!
  total: Int!
  totalPages: Int!
  hasNextPage: Boolean!
}

type Role {
  id: Float!
  name: String!
  permission: [Permission!]!
  user: [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Permission {
  id: Int!
  name: String!
  role: [Role!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PermissionResponse {
  message: String!
  status: Int!
  pagination: Pagination!
  data: [Permission!]!
}

type RoleResponse {
  message: String!
  status: Int!
  pagination: Pagination!
  data: [Role!]!
}

type GalleryEntity {
  id: Float!
  name: String!
  fileUrl: String!
  mobileFileUrl: String!
  desktopFileUrl: String!
  fileType: FileType!
  carePackage: [CarePackageEntity!]!
  privacy: Boolean!
  visible: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# File Type
enum FileType {
  # Image
  IMAGE

  # Video
  VIDEO

  # Audio
  AUDIO

  # Document
  DOCUMENT
}

type CarePackageEntity {
  id: Float!
  title: String!
  description: String
  thumbnails: [GalleryEntity!]
  level: Float!
  price: Float!
  basis: BasisType!
  carePackageTime: [CarePackageTimeEntity!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Basis Type
enum BasisType {
  # Hourly
  HOURLY

  # Daily
  DAILY

  # Weekly
  WEEKLY

  # Monthly
  MONTHLY

  # Custom
  CUSTOM
}

type CarePackageTimeEntity {
  id: Float!
  title: String!
  carePackage: [CarePackageEntity!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CarePackageTimeResponse {
  message: String!
  status: Int!
  pagination: Pagination!
  data: [CarePackageTimeEntity!]!
}

type CarePackageResponse {
  message: String!
  status: Float!
  pagination: Pagination!
  data: [CarePackageEntity!]!
}

type GalleryResponse {
  message: String!
  status: Float!
  pagination: Pagination!
  data: [GalleryEntity!]!
}

type Query {
  test: String!
  permissionGetAll(
    paginationQuery: GlobalPagination!
    filterQuery: PermissionFilter!
  ): PermissionResponse!
  permissionGet(id: Int!): Permission!
  roleAccessGetAll(
    paginationQuery: GlobalPagination!
    filterQuery: RoleFilter!
  ): RoleResponse!
  roleAccessGet(id: Int!): Role!
  carePackageTimeGet(id: Float!): CarePackageTimeEntity!
  carePackageTimeGetAll(
    paginationQuery: GlobalPagination!
    filterQuery: CarePackageTimeFilter!
  ): CarePackageTimeResponse!
  carePackageGet(id: Float!): CarePackageEntity!
  carePackageGetAll(
    paginationQuery: GlobalPagination!
    filterQuery: CarePackageFilter!
  ): CarePackageResponse!
  galleryGetAll(
    paginationQuery: GlobalPagination!
    filterQuery: GalleryFilter!
  ): GalleryResponse!
}

input GlobalPagination {
  page: Int = 1
  limit: Int = 10
}

input PermissionFilter {
  id: Float
  name: String
}

input RoleFilter {
  id: Float
  name: String
}

input CarePackageTimeFilter {
  id: Float
  title: String
}

input CarePackageFilter {
  id: Float!
  title: String!
  level: Float!
  price: Float!
  basis: BasisType!
}

input GalleryFilter {
  id: Float
  name: String
  fileUrl: String
  mobileFileUrl: String
  desktopFileUrl: String
  fileType: FileType
}

type Mutation {
  signUp(signUpPayload: SignupInput!): SignResponse!
  adminSignIn(signInPayload: SignInInput!): SignResponse!
  signIn(signInPayload: SignInInput!): SignResponse!
  grantToken(refreshToken: String!): String!
  permissionCreate(createPermissionInput: CreatePermissionInput!): Permission!
  permissionUpdate(updatePermissionInput: UpdatePermissionInput!): Permission!
  permissionDelete(id: Int!): Permission!
  assignRoleToUser(userId: String!, roleId: Int!): User!
  unAssignRoleToUser(userId: String!): User!
  roleAccessCreate(createRoleAccessInput: CreateRoleInput!): Role!
  roleAccessUpdate(updateRoleAccessInput: UpdateRoleInput!): Role!
  roleAccessDelete(id: Int!): Role!
  carePackageTimeCreate(
    carePackageTimeInput: CarePackageTimeInput!
  ): CarePackageTimeEntity!
  carePackageTimeUpdate(
    updateCarePackageTimeInput: UpdateCarePackageTimeInput!
  ): CarePackageTimeEntity!
  carePackageTimeDelete(id: Float!): CarePackageTimeEntity!
  carePackageCreate(carePackageInput: CarePackageInput!): CarePackageEntity!
  carePackageUpdate(
    updateCarePackageInput: UpdateCarePackageInput!
  ): CarePackageEntity!
  carePackageDelete(id: Float!): CarePackageEntity!
  galleryCreate(galleryCreate: FileInput!): GalleryEntity!
}

input SignupInput {
  fullName: String!
  gender: GenderEnum
  phone: String!
  email: String
  password: String!
  firebaseToken: FirebaseTokenInput
}

# MALE , FEMALE , NOT_SAY
enum GenderEnum {
  MALE
  FEMALE
  NOT_SAY
}

input FirebaseTokenInput {
  token: String!
  platform: PlatformEnum!
}

# WEB , APP
enum PlatformEnum {
  WEB
  APP
}

input SignInInput {
  phoneOrEmail: String!
  password: String!
}

input CreatePermissionInput {
  name: String!
}

input UpdatePermissionInput {
  name: String
  id: Int!
}

input CreateRoleInput {
  name: String!
  permissionIds: [Int!]
}

input UpdateRoleInput {
  name: String
  permissionIds: [Int!]
  id: Int!
}

input CarePackageTimeInput {
  title: String!
}

input UpdateCarePackageTimeInput {
  title: String
  id: Float!
}

input CarePackageInput {
  title: String!
  description: String
  level: Float
  price: Float!
  basis: BasisType
  thumbnails: [Float!]
  carePackageTime: [Float!]
}

input UpdateCarePackageInput {
  title: String
  description: String
  level: Float
  price: Float
  basis: BasisType
  thumbnails: [Float!]
  carePackageTime: [Float!]
  id: Float!
}

input FileInput {
  container: String = "image"
  file: Upload!
}

# The `Upload` scalar type represents a file upload.
scalar Upload
